{"version":3,"sources":["components/todoprovider.js","components/todoitem.js","components/todolist.js","components/addtodo.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","TodoProvider","props","useState","text","id","shortid","generate","todo","setTodo","Provider","value","todos","filter","item","console","log","children","TodoItem","useContext","deleteTodo","Row","Col","xs","todoname","Button","size","onClick","TodoList","todolist","length","ListGroup","map","todoitem","Item","Alert","variant","Container","style","padding","AddTodo","newtodo","setNewTodo","Form","onSubmit","e","preventDefault","prevTodo","InputGroup","FormControl","placeholder","onChange","target","Append","type","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","className","App","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5ba18ae.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\r\nimport shortid from \"shortid\";\r\nexport const TodoContext = createContext();\r\n\r\nexport const TodoProvider = (props) => {\r\n  const [todo, setTodo] = useState([\r\n    { text: \"Give me attention\", id: shortid.generate() },\r\n  ]);\r\n\r\n  const deleteTodo = (id) => {\r\n    const todos = todo.filter((item) => {\r\n      return item.id !== id;\r\n    });\r\n    console.log(id);\r\n    setTodo(todos);\r\n  };\r\n\r\n  return (\r\n    <TodoContext.Provider value={[todo, setTodo, deleteTodo]}>\r\n      {props.children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport { TodoContext } from \"./todoprovider\";\r\n\r\nconst TodoItem = (props) => {\r\n  const [todo, setTodo, deleteTodo] = useContext(TodoContext);\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col xs={8}>\r\n          <h5>{props.todoname}</h5>\r\n        </Col>\r\n        <Col xs={4}>\r\n          <Button\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              deleteTodo(props.id);\r\n            }}\r\n          >\r\n            Completed\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { useState, useContext } from \"react\";\r\nimport TodoItem from \"./todoitem\";\r\nimport { TodoContext } from \"./todoprovider\";\r\nimport { ListGroup, Container, Alert } from \"react-bootstrap\";\r\nimport shortid from \"shortid\";\r\nconst TodoList = () => {\r\n  const [todo, setTodo] = useContext(TodoContext);\r\n\r\n  const todolist = todo.length ? (\r\n    <ListGroup>\r\n      {todo.map((todoitem) => (\r\n        <ListGroup.Item>\r\n          <TodoItem todoname={todoitem.text} id={todoitem.id} />\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  ) : (\r\n    <Alert variant=\"success\"> No Pending Tasks !</Alert>\r\n  );\r\n  return (\r\n    <div>\r\n      <Container style={{ padding: \"20px\" }}>{todolist}</Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { TodoContext } from \"./todoprovider\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport shortid from \"shortid\";\r\nconst AddTodo = () => {\r\n  const [todo, setTodo] = useContext(TodoContext);\r\n  const [newtodo, setNewTodo] = useState(\"\");\r\n  const updateNewTodo = (e) => {\r\n    setNewTodo(e.target.value);\r\n  };\r\n\r\n  const addNewTodo = (e) => {\r\n    e.preventDefault();\r\n    console.log(newtodo);\r\n    setNewTodo(\"\");\r\n\r\n    setTodo((prevTodo) => [\r\n      { text: newtodo, id: shortid.generate() },\r\n      ...prevTodo,\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form onSubmit={addNewTodo}>\r\n        <InputGroup>\r\n          <FormControl\r\n            placeholder=\"Add new todo...\"\r\n            value={newtodo}\r\n            onChange={updateNewTodo}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Add\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","import React, { useContext } from \"react\";\r\nimport { TodoContext } from \"./todoprovider\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nconst NavBar = () => {\r\n  const [todo, setTodo] = useContext(TodoContext);\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\">\r\n          <h3>Total Tasks : {todo.length}</h3>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\"></Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useEffect, useState } from \"react\";\nimport TodoList from \"./components/todolist\";\nimport \"./App.css\";\nimport AddTodo from \"./components/addtodo\";\nimport { TodoProvider } from \"./components/todoprovider\";\nimport NavBar from \"./components/navbar\";\nimport { Jumbotron } from \"react-bootstrap\";\n\nconst App = () => {\n  return (\n    <TodoProvider>\n      <div className=\"App\">\n        <NavBar />\n        <Jumbotron>\n          <h1>ToDo's</h1>\n        </Jumbotron>\n        <AddTodo />\n        <TodoList />\n      </div>\n    </TodoProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}